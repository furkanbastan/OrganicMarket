// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OrganicMarket.Persistence.Contexts;

#nullable disable

namespace OrganicMarket.Persistence.Migrations
{
    [DbContext(typeof(OrganicMarketDbContext))]
    [Migration("20230518125717_init_mg")]
    partial class init_mg
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("OrganicMarket.Domain.Entities.Adress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("District")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Neighbourhood")
                        .HasColumnType("TEXT");

                    b.Property<int>("PostCode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Adresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c1a7de0b-ab68-4d75-8ead-944ced86c1e2"),
                            City = "Sakarya",
                            CreatedBy = "Süper Admin",
                            CreatedDate = new DateTime(2023, 5, 18, 15, 57, 16, 801, DateTimeKind.Local).AddTicks(9400),
                            District = "Erenler",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Neighbourhood = "Küpçüler",
                            PostCode = 54100,
                            Title = "Ev Adresi",
                            UserId = new Guid("4bb43339-1c0f-4630-9d1a-dd579ecd0428")
                        },
                        new
                        {
                            Id = new Guid("9aaa8835-2327-4e20-8617-8c3c9ce1c0b2"),
                            City = "İstanbul",
                            CreatedBy = "Süper Admin",
                            CreatedDate = new DateTime(2023, 5, 18, 15, 57, 16, 801, DateTimeKind.Local).AddTicks(9424),
                            District = "Sultan",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Neighbourhood = "Bağcılar",
                            PostCode = 34250,
                            Title = "2. Ev Adresi",
                            UserId = new Guid("4bb43339-1c0f-4630-9d1a-dd579ecd0428")
                        },
                        new
                        {
                            Id = new Guid("c14086c3-a1bf-4921-9fb5-5dec6db1ac0f"),
                            City = "Konya",
                            CreatedBy = "Süper Admin",
                            CreatedDate = new DateTime(2023, 5, 18, 15, 57, 16, 801, DateTimeKind.Local).AddTicks(9427),
                            District = "Ayvalca",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Neighbourhood = "Bozkır",
                            PostCode = 42630,
                            Title = "Köy Evi Adresi",
                            UserId = new Guid("4bb43339-1c0f-4630-9d1a-dd579ecd0428")
                        });
                });

            modelBuilder.Entity("OrganicMarket.Domain.Entities.Basket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("BasketPrice")
                        .HasColumnType("TEXT");

                    b.Property<bool>("BeingOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductCount")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Baskets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2335fd49-d0e3-4ee6-8f4e-2d4386172d3a"),
                            BasketPrice = 0m,
                            BeingOrder = false,
                            CreatedBy = "Süper Admin",
                            CreatedDate = new DateTime(2023, 5, 18, 15, 57, 17, 17, DateTimeKind.Local).AddTicks(8735),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductCount = 0,
                            UserId = new Guid("4bb43339-1c0f-4630-9d1a-dd579ecd0428")
                        });
                });

            modelBuilder.Entity("OrganicMarket.Domain.Entities.BasketProduct", b =>
                {
                    b.Property<Guid>("BasketId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.HasKey("BasketId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("BasketProducts");

                    b.HasData(
                        new
                        {
                            BasketId = new Guid("2335fd49-d0e3-4ee6-8f4e-2d4386172d3a"),
                            ProductId = new Guid("6aab099d-e302-4a07-8cf8-cb883a497465")
                        },
                        new
                        {
                            BasketId = new Guid("2335fd49-d0e3-4ee6-8f4e-2d4386172d3a"),
                            ProductId = new Guid("013e4f26-f5a1-4c56-8f9a-3d77c89bbcc4")
                        });
                });

            modelBuilder.Entity("OrganicMarket.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2e209a21-7bb2-43b1-a0c6-6e7d0c990db8"),
                            CreatedBy = "Süper Admin",
                            CreatedDate = new DateTime(2023, 5, 18, 15, 57, 17, 19, DateTimeKind.Local).AddTicks(280),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Meyve"
                        },
                        new
                        {
                            Id = new Guid("0bd7b92f-d7bf-4dce-91c3-ac17f3b1b345"),
                            CreatedBy = "Süper Admin",
                            CreatedDate = new DateTime(2023, 5, 18, 15, 57, 17, 19, DateTimeKind.Local).AddTicks(286),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sebze"
                        },
                        new
                        {
                            Id = new Guid("45269bbb-a36f-46c8-a69f-e1d2802207f5"),
                            CreatedBy = "Süper Admin",
                            CreatedDate = new DateTime(2023, 5, 18, 15, 57, 17, 19, DateTimeKind.Local).AddTicks(290),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Köy Ürünleri"
                        },
                        new
                        {
                            Id = new Guid("49405eff-13c5-4558-a5f2-8b589b7e915c"),
                            CreatedBy = "Süper Admin",
                            CreatedDate = new DateTime(2023, 5, 18, 15, 57, 17, 19, DateTimeKind.Local).AddTicks(294),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tereyağları"
                        },
                        new
                        {
                            Id = new Guid("4ab0c360-a01f-4862-aed4-52f16a08470d"),
                            CreatedBy = "Süper Admin",
                            CreatedDate = new DateTime(2023, 5, 18, 15, 57, 17, 19, DateTimeKind.Local).AddTicks(298),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pekmezler"
                        },
                        new
                        {
                            Id = new Guid("62e6c2e9-e35c-4f4e-a4c2-4a70c7d06180"),
                            CreatedBy = "Süper Admin",
                            CreatedDate = new DateTime(2023, 5, 18, 15, 57, 17, 19, DateTimeKind.Local).AddTicks(303),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Turşular"
                        },
                        new
                        {
                            Id = new Guid("c1faf13c-9e78-43be-9970-b6a20336bf48"),
                            CreatedBy = "Süper Admin",
                            CreatedDate = new DateTime(2023, 5, 18, 15, 57, 17, 19, DateTimeKind.Local).AddTicks(307),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Yöresel"
                        },
                        new
                        {
                            Id = new Guid("336461a4-29b2-4dbc-887d-2b68e6527ba5"),
                            CreatedBy = "Süper Admin",
                            CreatedDate = new DateTime(2023, 5, 18, 15, 57, 17, 19, DateTimeKind.Local).AddTicks(312),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Süt ve Süt Ürünleri"
                        },
                        new
                        {
                            Id = new Guid("9bcef803-76d1-4993-8b1f-7eec1941acf4"),
                            CreatedBy = "Süper Admin",
                            CreatedDate = new DateTime(2023, 5, 18, 15, 57, 17, 19, DateTimeKind.Local).AddTicks(316),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kahvaltılık"
                        },
                        new
                        {
                            Id = new Guid("6724e8c6-a7fa-42d7-ad36-33e87d945a31"),
                            CreatedBy = "Süper Admin",
                            CreatedDate = new DateTime(2023, 5, 18, 15, 57, 17, 19, DateTimeKind.Local).AddTicks(320),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kuruyemiş"
                        },
                        new
                        {
                            Id = new Guid("c8784e8e-13de-4024-b7fb-71229b37fd55"),
                            CreatedBy = "Süper Admin",
                            CreatedDate = new DateTime(2023, 5, 18, 15, 57, 17, 19, DateTimeKind.Local).AddTicks(324),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Baharatlar"
                        },
                        new
                        {
                            Id = new Guid("c9b467ba-9efa-481f-bdc1-1132e6f5186d"),
                            CreatedBy = "Süper Admin",
                            CreatedDate = new DateTime(2023, 5, 18, 15, 57, 17, 19, DateTimeKind.Local).AddTicks(328),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Lokumlar"
                        },
                        new
                        {
                            Id = new Guid("4a8cad9c-57cd-4ad9-8048-7662c6c24a17"),
                            CreatedBy = "Süper Admin",
                            CreatedDate = new DateTime(2023, 5, 18, 15, 57, 17, 19, DateTimeKind.Local).AddTicks(332),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Şire Ürünleri"
                        },
                        new
                        {
                            Id = new Guid("6644a63f-c42b-49e8-afb9-67e012a3c855"),
                            CreatedBy = "Süper Admin",
                            CreatedDate = new DateTime(2023, 5, 18, 15, 57, 17, 19, DateTimeKind.Local).AddTicks(351),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sucuklar"
                        },
                        new
                        {
                            Id = new Guid("a0ce76d6-e259-47e5-afda-12e5f4b52852"),
                            CreatedBy = "Süper Admin",
                            CreatedDate = new DateTime(2023, 5, 18, 15, 57, 17, 19, DateTimeKind.Local).AddTicks(371),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Zeytinler"
                        },
                        new
                        {
                            Id = new Guid("22b5d36e-1d52-4d2f-8ce1-31a0aa567c66"),
                            CreatedBy = "Süper Admin",
                            CreatedDate = new DateTime(2023, 5, 18, 15, 57, 17, 19, DateTimeKind.Local).AddTicks(376),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hurmalar"
                        },
                        new
                        {
                            Id = new Guid("fa961207-14b0-4f31-9aa7-d9ab3ebd35f5"),
                            CreatedBy = "Süper Admin",
                            CreatedDate = new DateTime(2023, 5, 18, 15, 57, 17, 19, DateTimeKind.Local).AddTicks(380),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kuru Meyveler"
                        });
                });

            modelBuilder.Entity("OrganicMarket.Domain.Entities.Identity.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("16ea936c-7a28-4c30-86a2-9a9704b6115e"),
                            ConcurrencyStamp = "3fb68b15-8f69-4aa6-8530-d6e16556b7d4",
                            Name = "Superadmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = new Guid("7cb750cf-3612-4fb4-9f7d-a38ba8f16bf4"),
                            ConcurrencyStamp = "5a88d506-a072-44c5-8a5a-9896d5251400",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("edf6c246-41d8-475f-8d92-41dddac3aefb"),
                            ConcurrencyStamp = "26c7cab1-cb85-4fd7-b00c-ee9d8526deb2",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("OrganicMarket.Domain.Entities.Identity.AppRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("OrganicMarket.Domain.Entities.Identity.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("SupplierId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e59b8747-5642-44c2-b989-38b2f311cbb7",
                            Email = "superadmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Cem",
                            ImageId = new Guid("f71f4b9a-aa60-461d-b398-de31001bf214"),
                            LastName = "Keskin",
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERADMIN@GMAIL.COM",
                            NormalizedUserName = "SUPERADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJmYWUFXa5iWlhONLWuBfQcvPLih4HaP5tDk5KOYuFJM3mcaxKadThVja3CkbJBueA==",
                            PhoneNumber = "+905439999999",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "12dbc323-9efc-45ad-bfac-21ba87e117ee",
                            TwoFactorEnabled = false,
                            UserName = "superadmin@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("3aa42229-1c0f-4630-8c1a-db879ecd0427"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c1f286fa-b847-4bed-94dd-93e2a31719bb",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            ImageId = new Guid("d16a6ec7-8c50-4ab0-89a5-02b9a551f0fa"),
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEB60POeBQydYlOD/PT3fwFSA3D+4Dq0o2lEdtVYbQeOSOQT1N3Rgyyb4SJKrk/FVhA==",
                            PhoneNumber = "+905439999988",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2349f522-1b00-4d37-92b4-3df94ecf8be1",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("4bb43339-1c0f-4630-9d1a-dd579ecd0428"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bff7eb66-4dd8-469b-824a-d71087cf3776",
                            Email = "user@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Normal",
                            ImageId = new Guid("d16a6ec7-8c50-4ab0-89a5-02b9a551f0fa"),
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@GMAIL.COM",
                            NormalizedUserName = "USER@GMAIL.COM",
                            PhoneNumber = "+905439999988",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eb635397-6872-48e4-9e82-f5f55efce615",
                            TwoFactorEnabled = false,
                            UserName = "user@gmail.com"
                        });
                });

            modelBuilder.Entity("OrganicMarket.Domain.Entities.Identity.AppUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("OrganicMarket.Domain.Entities.Identity.AppUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("OrganicMarket.Domain.Entities.Identity.AppUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c"),
                            RoleId = new Guid("16ea936c-7a28-4c30-86a2-9a9704b6115e")
                        },
                        new
                        {
                            UserId = new Guid("3aa42229-1c0f-4630-8c1a-db879ecd0427"),
                            RoleId = new Guid("7cb750cf-3612-4fb4-9f7d-a38ba8f16bf4")
                        });
                });

            modelBuilder.Entity("OrganicMarket.Domain.Entities.Identity.AppUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OrganicMarket.Domain.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f71f4b9a-aa60-461d-b398-de31001bf214"),
                            CreatedBy = "Süper Admin",
                            CreatedDate = new DateTime(2023, 5, 18, 15, 57, 17, 19, DateTimeKind.Local).AddTicks(3124),
                            FileName = "test1",
                            FileType = "JPG",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d16a6ec7-8c50-4ab0-89a5-02b9a551f0fa"),
                            CreatedBy = "Süper Admin",
                            CreatedDate = new DateTime(2023, 5, 18, 15, 57, 17, 19, DateTimeKind.Local).AddTicks(3140),
                            FileName = "test2",
                            FileType = "PNG",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("OrganicMarket.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CargoPrice")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Discount")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("91593468-0be9-4543-9045-b02f112b1d8e"),
                            CargoPrice = 15m,
                            Completed = false,
                            CreatedBy = "Süper Admin",
                            CreatedDate = new DateTime(2023, 5, 18, 15, 57, 17, 19, DateTimeKind.Local).AddTicks(5948),
                            Discount = 0m,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalPrice = 0m,
                            UserId = new Guid("4bb43339-1c0f-4630-9d1a-dd579ecd0428")
                        });
                });

            modelBuilder.Entity("OrganicMarket.Domain.Entities.OrderProduct", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts");

                    b.HasData(
                        new
                        {
                            OrderId = new Guid("91593468-0be9-4543-9045-b02f112b1d8e"),
                            ProductId = new Guid("6aab099d-e302-4a07-8cf8-cb883a497465")
                        },
                        new
                        {
                            OrderId = new Guid("91593468-0be9-4543-9045-b02f112b1d8e"),
                            ProductId = new Guid("013e4f26-f5a1-4c56-8f9a-3d77c89bbcc4")
                        });
                });

            modelBuilder.Entity("OrganicMarket.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("FavoriteCount")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("SalesUnit")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("TEXT");

                    b.Property<int>("ViewCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ImageId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6aab099d-e302-4a07-8cf8-cb883a497465"),
                            CategoryId = new Guid("0bd7b92f-d7bf-4dce-91c3-ac17f3b1b345"),
                            CreatedBy = "Süper Admin",
                            CreatedDate = new DateTime(2023, 5, 18, 15, 57, 17, 20, DateTimeKind.Local).AddTicks(7527),
                            Description = "Mevsiminde Adananın bahçelerinden toplanmış fasulye",
                            FavoriteCount = 0,
                            ImageId = new Guid("f71f4b9a-aa60-461d-b398-de31001bf214"),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Taze Fasulye",
                            Price = 50m,
                            SalesUnit = 0,
                            SupplierId = new Guid("d7a9c01c-ffaf-49c5-86b3-f2eda4b970b5"),
                            ViewCount = 0
                        },
                        new
                        {
                            Id = new Guid("013e4f26-f5a1-4c56-8f9a-3d77c89bbcc4"),
                            CategoryId = new Guid("0bd7b92f-d7bf-4dce-91c3-ac17f3b1b345"),
                            CreatedBy = "Süper Admin",
                            CreatedDate = new DateTime(2023, 5, 18, 15, 57, 17, 20, DateTimeKind.Local).AddTicks(7568),
                            Description = "Mevsiminde Adananın bahçelerinden toplanmış fasulye",
                            FavoriteCount = 0,
                            ImageId = new Guid("f71f4b9a-aa60-461d-b398-de31001bf214"),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kırmızı Biber",
                            Price = 50m,
                            SalesUnit = 0,
                            SupplierId = new Guid("25783bd4-8e59-49bb-a10e-3b7c2ada573b"),
                            ViewCount = 0
                        });
                });

            modelBuilder.Entity("OrganicMarket.Domain.Entities.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d7a9c01c-ffaf-49c5-86b3-f2eda4b970b5"),
                            CreatedBy = "Süper Admin",
                            CreatedDate = new DateTime(2023, 5, 18, 15, 57, 17, 21, DateTimeKind.Local).AddTicks(117),
                            Description = "Adana da 1999 da kurulduk.",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Doğan Gıda"
                        },
                        new
                        {
                            Id = new Guid("25783bd4-8e59-49bb-a10e-3b7c2ada573b"),
                            CreatedBy = "Süper Admin",
                            CreatedDate = new DateTime(2023, 5, 18, 15, 57, 17, 21, DateTimeKind.Local).AddTicks(123),
                            Description = "Sakarya da 1898 de kurulduk.",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Baştan Gıda"
                        });
                });

            modelBuilder.Entity("OrganicMarket.Domain.Entities.Adress", b =>
                {
                    b.HasOne("OrganicMarket.Domain.Entities.Identity.AppUser", "User")
                        .WithMany("Adresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OrganicMarket.Domain.Entities.Basket", b =>
                {
                    b.HasOne("OrganicMarket.Domain.Entities.Identity.AppUser", "User")
                        .WithMany("Baskets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OrganicMarket.Domain.Entities.BasketProduct", b =>
                {
                    b.HasOne("OrganicMarket.Domain.Entities.Basket", "Basket")
                        .WithMany("BasketProducts")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrganicMarket.Domain.Entities.Product", "Product")
                        .WithMany("BasketProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Basket");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OrganicMarket.Domain.Entities.Identity.AppRoleClaim", b =>
                {
                    b.HasOne("OrganicMarket.Domain.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrganicMarket.Domain.Entities.Identity.AppUser", b =>
                {
                    b.HasOne("OrganicMarket.Domain.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrganicMarket.Domain.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.Navigation("Image");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("OrganicMarket.Domain.Entities.Identity.AppUserClaim", b =>
                {
                    b.HasOne("OrganicMarket.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrganicMarket.Domain.Entities.Identity.AppUserLogin", b =>
                {
                    b.HasOne("OrganicMarket.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrganicMarket.Domain.Entities.Identity.AppUserRole", b =>
                {
                    b.HasOne("OrganicMarket.Domain.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrganicMarket.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrganicMarket.Domain.Entities.Identity.AppUserToken", b =>
                {
                    b.HasOne("OrganicMarket.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrganicMarket.Domain.Entities.Order", b =>
                {
                    b.HasOne("OrganicMarket.Domain.Entities.Identity.AppUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OrganicMarket.Domain.Entities.OrderProduct", b =>
                {
                    b.HasOne("OrganicMarket.Domain.Entities.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrganicMarket.Domain.Entities.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OrganicMarket.Domain.Entities.Product", b =>
                {
                    b.HasOne("OrganicMarket.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrganicMarket.Domain.Entities.Image", "Image")
                        .WithMany("Products")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrganicMarket.Domain.Entities.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Image");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("OrganicMarket.Domain.Entities.Basket", b =>
                {
                    b.Navigation("BasketProducts");
                });

            modelBuilder.Entity("OrganicMarket.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("OrganicMarket.Domain.Entities.Identity.AppUser", b =>
                {
                    b.Navigation("Adresses");

                    b.Navigation("Baskets");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("OrganicMarket.Domain.Entities.Image", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("OrganicMarket.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("OrganicMarket.Domain.Entities.Product", b =>
                {
                    b.Navigation("BasketProducts");

                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("OrganicMarket.Domain.Entities.Supplier", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
